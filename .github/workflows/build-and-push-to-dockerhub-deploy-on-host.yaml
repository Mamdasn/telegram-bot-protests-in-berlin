name: Dockerhub Publish and Deploy on host

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - '.github/**'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  determine-runner:
    runs-on: ubuntu-latest
    env:
      GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    outputs:
      selected-runner: ${{ steps.select-runner.outputs.runner }}
      docker-platform: ${{ steps.select-runner.outputs.platform }}
    steps:
      - name: Check out repository
        uses: actions/checkout@v3

      - name: Select Runner
        id: select-runner
        run: |
          if [ "$(gh api /repos/${{ github.repository }}/actions/runners --paginate | jq '.runners[] | select(.labels[].name == "ARM64" and .status == "online")')" ]; then
            echo "runner=self-hosted-arm64" >> $GITHUB_ENV
            echo "platform=linux/arm64" >> $GITHUB_ENV
            echo "::set-output name=runner::self-hosted-arm64"
            echo "::set-output name=platform::linux/arm64"
          elif [ "$(gh api /repos/${{ github.repository }}/actions/runners --paginate | jq '.runners[] | select(.labels[].name == "X64" and .status == "online")')" ]; then
            echo "runner=self-hosted-x64" >> $GITHUB_ENV
            echo "platform=linux/amd64" >> $GITHUB_ENV
            echo "::set-output name=runner::self-hosted-x64"
            echo "::set-output name=platform::linux/amd64"
          else
            echo "No suitable runner available."
            exit 1
          fi

  build-and-push-to-dockerhub:
    needs: determine-runner
    runs-on: ${{ needs.determine-runner.outputs.selected-runner }}
    if: ${{ always() }}
    steps:
    - name: Check Out Repo
      uses: actions/checkout@v3

    - name: Log in to Docker Hub
      uses: docker/login-action@v3
      with:
        username: ${{ secrets.DOCKERHUB_USERNAME }}
        password: ${{ secrets.DOCKERHUB_TOKEN }}

    - name: Set up QEMU
      uses: docker/setup-qemu-action@v3
      with:
        platforms: ${{ needs.determine-runner.outputs.docker-platform }}

    - name: Set Docker platform based on selected runner
      run: |
        echo "DOCKER_DEFAULT_PLATFORM=${{ needs.determine-runner.outputs.docker-platform }}" >> $GITHUB_ENV

    - name: Build and push Docker image using Docker Compose
      run: |
        docker compose build
        docker compose push
  deploy-on-host:
    runs-on: self-hosted
    needs: [build-and-push-to-dockerhub]
    steps:
    - name: Deploy to Self-Hosted
      env:
        BRANCH: main
        CONTAINER_DIR: ${{secrets.HOME}}/telegram-bot-protests-in-berlin
        CONTAINER_NAME_1: postgres_db
        CONTAINER_NAME_2: protestcrawler
        CONTAINER_NAME_3: telegrambot
        CONTAINER_NAME_4: tor_privoxy
        TG_BOT_TOKEN: ${{secrets.TG_BOT_TOKEN}}
        IP_ADDRESS: ${{secrets.IP_HOST}}
        SSL_PORT: ${{secrets.SSL_PORT}}
      run: |
        export TG_BOT_TOKEN=$TG_BOT_TOKEN && 
        export IP_ADDRESS=$IP_ADDRESS && 
        export SSL_PORT=$SSL_PORT && 
        cd $CONTAINER_DIR  && 
        git fetch --all  && 
        git rev-parse --verify --quiet $BRANCH &&
        git checkout $BRANCH  && 
        git merge origin/$BRANCH  && 
        docker compose down  && 
        docker system prune -af  && 
        docker compose up -d  && 
        echo Check whether the docker containers are running...  && 
        docker ps -q --filter name=^${CONTAINER_NAME_1}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_2}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_3}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_4}$ | grep -q .  && 
        echo All docker containers are running.
