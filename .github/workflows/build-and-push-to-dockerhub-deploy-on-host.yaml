name: Dockerhub Publish and Deploy on host

on:
  push:
    branches:
      - main
    paths-ignore:
      - '.gitignore'
      - '.pre-commit-config.yaml'
      - '.github/**'
      - 'docs/**'
      - 'README.md'
  workflow_dispatch:

jobs:
  build-and-push-to-dockerhub:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Set up Docker Buildx with QEMU
        uses: docker/setup-buildx-action@v3
        with:
          platforms: linux/arm64

      - name: Build and push arm64 image
        run: |
        docker buildx bake --push --file docker-compose.yml

  deploy-on-host:
    runs-on: self-hosted
    needs: [build-and-push-to-dockerhub]
    steps:
    - name: Deploy to Self-Hosted
      env:
        BRANCH: main
        CONTAINER_DIR: Action-Home/telegram-bot-protests-in-berlin
        CONTAINER_NAME_1: postgres_db
        CONTAINER_NAME_2: protestcrawler
        CONTAINER_NAME_3: telegrambot
        CONTAINER_NAME_4: tor_privoxy
        TG_BOT_TOKEN: ${{secrets.TG_BOT_TOKEN}}
        DB_UPDATE_PERIOD: ${{secrets.DB_UPDATE_PERIOD}}
        IP_ADDRESS: ${{secrets.IP_HOST}}
        SSL_PORT: ${{secrets.SSL_PORT}}
      run: |
        export TG_BOT_TOKEN=$TG_BOT_TOKEN && 
        export DB_UPDATE_PERIOD=$DB_UPDATE_PERIOD && 
        export IP_ADDRESS=$IP_ADDRESS && 
        export SSL_PORT=$SSL_PORT && 
        cd ${HOME}/$CONTAINER_DIR  && 
        git fetch --all  && 
        git rev-parse --verify --quiet $BRANCH &&
        git checkout $BRANCH  && 
        git merge origin/$BRANCH  && 
        docker compose down  && 
        docker system prune -af  && 
        docker compose up -d  && 
        echo Check whether the docker containers are running...  && 
        docker ps -q --filter name=^${CONTAINER_NAME_1}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_2}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_3}$ | grep -q .  && 
        docker ps -q --filter name=^${CONTAINER_NAME_4}$ | grep -q .  && 
        echo All docker containers are running.
